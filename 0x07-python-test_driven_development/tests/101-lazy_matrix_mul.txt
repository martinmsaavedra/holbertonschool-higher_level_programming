The ``101-matrix_multiplication`` module
========================================
Using ``matrix_multiplication``
-------------------------------

Import function:
        >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test: two matrices -> list of lists of integers
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
        [[ 7 10]
        [15 22]]

>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
        [[13, 16]]

Test: matrices with integers and floats
        >>> lazy_matrix_mul([[1.2, 2]], [[3, 4.5], [2.5, 4]])
        [[ 8.6 13.4]]

Test: m_a as integer, m_b as list of integers
        >>> lazy_matrix_mul(5, [10, 20])
        Traceback (most recent call last):
        ...
        ValueError: Scalar operands are not allowed, use '*' instead

Test: m_a as list of integers, m_b as integer
        >>> lazy_matrix_mul([10, 20], 5)
        Traceback (most recent call last):
        ...
        ValueError: Scalar operands are not allowed, use '*' instead

Test: m_a as list of integers, m_b as list of lists of integers
        >>> lazy_matrix_mul([10, 10], [[20, 20], [30, 40]])
        array([500, 600])

Test: m_a as list of lists of integers, m_b as list of integers
        >>> lazy_matrix_mul([[10, 10], [20, 20]], [30, 40])
        array([ 700, 1400])

Test: m_a as empty list, m_b as list of lists of integers
        >>> lazy_matrix_mul([], [[10, 20], [30, 40]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Test: m_a as empty list of lists, m_b as list of lists of integers
        >>> lazy_matrix_mul([[]], [[10, 20], [30, 40]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Test: m_a as list of lists of integers, m_b as empty list
        >>> lazy_matrix_mul([[10, 20], [30, 40]], [])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Test: m_a as list of lists of integers, m_b as empty list of lists
        >>> lazy_matrix_mul([[10, 20], [30, 40]], [[]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Test: m_a as list of lists of different types, m_b as list of lists of integers
        >>> lazy_matrix_mul([[1, "Hello"]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        TypeError: invalid data type for einsum

Test: m_a as list of lists of integers, m_b as list of lists of different types
        >>> lazy_matrix_mul([[1, 2]], [[3, "Hello"], [5, 6]])
        Traceback (most recent call last):
        ...
        TypeError: invalid data type for einsum

Test: m_a as list of lists of integers with different sizes, m_b as list of lists of integers
        >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: setting an array element with a sequence.

Test: m_a as list of lists of integers, m_b as list of lists of integers with different sizes
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[3, 4], [5, 6, 7]])
        Traceback (most recent call last):
        ...
        ValueError: setting an array element with a sequence.

Test: size of columns of m_a different than size of rows of m_b
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[3, 4, 5]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (1,3) not aligned: 2 (dim 1) != 1 (dim 0)

Test: size of columns of m_a different than size of rows of m_b
        >>> lazy_matrix_mul([[1, 2, 3]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (1,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Test: three matrices
        >>> lazy_matrix_mul([[1, 2]], [[3, 4]], [[5, 6]])
        Traceback (most recent call last):
        ...
        TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given